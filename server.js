const express = require('express');
const app = express();
const port = 3000;
const bodyParser = require('body-parser');
const http = require("http");
const cors = require('cors');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const { body, check, validationResult } = require('express-validator');
const sanitizer = require('sanitize');
const axios = require('axios');

const options = {
  swaggerDefinition: {
    info: {
      title: 'Database API',
      version: '1.0.0',
      description: 'Test Database Express API with autogenerated swagger doc',
    },
     host: '68.183.117.171:3000',
     basePath: '/',
  },
  apis: ['./server.js'],
};

const specs = swaggerJsdoc(options);
app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs, {explorer: true}));
app.use(cors());

const mariadb = require('mariadb/callback');

const pool = mariadb.createPool({
	host: 'localhost',
	user: 'root',
	password: 'root',
	port: 3306,
	connectionLimit: 5,
	database: 'sample'
});

app.use(bodyParser.json({type: 'application/json'}));
app.use(bodyParser.urlencoded({extended: true}));

var jsonParser = bodyParser.json()

pool.getConnection((err, conn) => {
  if (err) {
    console.log("not connected due to error: " + err);
  } else {
    console.log("connected ! connection id is " + conn.threadId);
    conn.end(); //release to pool
  }
});

// EXPRESS ENDPOINTS BELOW

app.get("/say/:keyword", (req, res) => {
	key = req.params.keyword;  
	//console.log("Sidney Henderson says:" + key);
axios.get('https://iljognyf62.execute-api.us-east-2.amazonaws.com/prod/say/?keyword=' + key)
    .then(response => {
res.send("Sidney Henderson says: " + response.data );
    });
});

/**
 * @swagger
 * /:
 *    get:
 *      description: Home route for root
 *      summary: Home route for root
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Root route with hello world message for testing initial setup
 */
app.get('/', (req,res) => {
	res.send('Hello World!');
});

/**
 * @swagger
 * /fivecustomers:
 *    get:
 *      description: This should return the first 5 customers
 *      summary: This should return the first 5 customers
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object customers which contains the first 5 customers information
 */
app.get('/fivecustomers',(req,res) => {
    pool.getConnection((err, connection) => {
        if(err) throw err;
        connection.query('SELECT * from customer LIMIT 5', (err, rows) => {
            connection.release(); // return the connection to pool
            if(err) throw err;
            res.status(200).json(rows);
      });
   });
});

/**
 * @swagger
 * /agents:
 *    get:
 *      description: This should return all agents
 *      summary: This should return all agents
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object agent containing all agent information
 */
app.get('/agents',(req,res) => {
    pool.getConnection((err, connection) => {
        if(err) throw err;
        connection.query('SELECT * from agents', (err, rows) => {
            connection.release(); // return the connection to pool
            if(err) throw err;
            res.status(200).json(rows);
        });
   });
});

/**
 * @swagger
 * /company:
 *    get:
 *      description: This should return all companies
 *      summary: This should return all companies
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object company containing all company information 
 */
app.get('/company',(req,res) => {
    pool.getConnection((err, connection) => {
        if(err) throw err;
        connection.query('SELECT * from company', (err, rows) => {
            connection.release(); // return the connection to pool
            if(err) throw err;
            res.status(200).json(rows);
        });
   });
});

/**
 * @swagger
 * /daysorder:
 *    get:
 *      description: This should return all information on orders
 *      summary: This should return all information on orders
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object orders containing all order information
 */
app.get('/daysorder',(req,res) => {
    pool.getConnection((err, connection) => {
        if(err) throw err;
        connection.query('SELECT * from daysorder', (err, rows) => {
            connection.release(); // return the connection to pool
            if(err) throw err;
            res.status(200).json(rows);
        });
   });
});

/**
 * @swagger
 * /studentreport:
 *    get:
 *      description: This should return class and grade information from all student reports
 *      summary: This should return class and grade information from all student reports
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object containing class and grade information from all student reports
 */
app.get('/studentreport',(req,res) => {
    pool.getConnection((err, connection) => {
        if(err) throw err;
        connection.query('SELECT CLASS, GRADE from studentreport', (err, rows) => {
            connection.release(); // return the connection to pool
            if(err) throw err;
            res.status(200).json(rows);
        });
   });
});

/**                                                                
 * @swagger                                                        
 * /studentrobert:                                                   
 *    get:                                                         
 *      summary: This should return a student named robert
 *      description: This should return a student named robert               
 *      produces:                                                  
 *          - application/json                                     
 *      responses:                                                 
 *          200:                                                   
 *              description: Object student where name is robert
 */                                                                
app.get('/studentrobert',(req,res) => {
    pool.getConnection((err, connection) => {
        if(err) throw err;
        connection.query("SELECT * from student WHERE NAME = 'robert'", (err, rows) => {
            connection.release(); // return the connection to pool
            if(err) throw err;
            res.status(200).json(rows);
        });
   });
});

/**
 * @swagger
 * /student:
 *    get:
 *      summary: This should return all students
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object student containing all students
 */
app.get('/student',(req,res) => {
    pool.getConnection((err, connection) => {
        if(err) throw err;
        connection.query('SELECT * from student', (err, rows) => {
            connection.release(); // return the connection to pool
            if(err) throw err;
            res.status(200).json(rows);
        });
   });
});

/**
 * @swagger
 * /student:
 *    post:
 *      description: This should add a student object to student table
 *      summary: This should add a student object to student table
 *      consumes:
 *        - application/json
 *      parameters:
 *        - in: body
 *          name: student
 *          description: The student to create.
 *          schema:
 *            type: object
 *            properties:
 *              NAME:
 *                type: string
 *              TITLE:
 *                type: string
 *              CLASS:
 *                type: string
 *              SECTION:
 *                type: string
 *              ROLLID:
 *                type: integer
 *      responses:
 *        201:
 *          description: Created
 */
app.post('/student', jsonParser,
  [check('NAME').isLength({ min: 3, max: 10 }).isAlpha().escape().trim(),
  check('TITLE').isLength({ min: 3, max: 10 }).isAlpha().escape().trim(), 
  check('CLASS').isLength({ min: 1, max: 5 }).isAlpha().escape().trim(),
  check('SECTION').isLength({ min: 1, max: 1 }).isAlpha().escape().trim(),
  check('ROLLID').isLength({ min: 1, max: 2 }).isInt().escape().trim()], 
function(req, res) {

const errors = validationResult(req);
  if (!errors.isEmpty()) 
{
    return res.status(422).json({ errors: errors.array()}) 
}

  pool.getConnection((err, connection) => {
	let sql = `INSERT INTO student(NAME, TITLE, CLASS, SECTION, ROLLID) VALUES (?)`;
  let values = [
    req.body.NAME,
    req.body.TITLE,
    req.body.CLASS,
    req.body.SECTION,
    req.body.ROLLID,
  ];


  connection.query(sql, [values], function(err, data, fields) {
    if (err) res.status(500).send(err);
    connection.release(); 
   res.json({
      status: 201,
      message: "New user added successfully"
    })
  })
});
});

/**
 * @swagger
 * /student/{ROLLID}:
 *    patch:
 *      description: This should update a student object's name and title information
 *      summary: This should update a student object's name and title information
 *      consumes:
 *        - application/json
 *      parameters:
 *        - in: path
 *          name: ROLLID
 *          required: true
 *          schema:
 *            type: integer
 *        - in: body
 *          name: student
 *          description: The student to update.
 *          schema:
 *            type: object
 *            properties:
 *              NAME:
 *                type: string
 *              TITLE:
 *                type: string
 *      responses:
 *          201:
 *              description: Update student object's name and title information
 */
app.patch('/student/:ROLLID', jsonParser,
  [check('NAME').isLength({ min: 3, max: 10 }).isAlpha().escape().trim(),
  check('TITLE').isLength({ min: 3, max: 10 }).isAlpha().escape().trim(),
  check('ROLLID').isLength({ min: 1, max: 2 }).isInt().escape().trim()],

function(req, res) {

const errors = validationResult(req);
  if (!errors.isEmpty())
{
    return res.status(422).json({ errors: errors.array()})
}


let ROLLID = req.params["ROLLID"];

  let body = req.body;
  let NAME = body["NAME"];
  let TITLE = body["TITLE"];

 let sql = `UPDATE student SET NAME='${NAME}',TITLE='${TITLE}' WHERE ROLLID=${ROLLID}`;

  pool.getConnection((err, connection) => {

  connection.query(sql, function(err, data, fields) {
    if (err) throw err;
  connection.release();
    res.json({
      status: 201,
      message: "Student updated successfully"
    })
  })
});
});

/**
 * @swagger
 * /student/{ROLLID}:
 *    put:
 *      description: This should allow for a complete update or insertion of a student object
 *      summary: This should allow for a complete update or insertion of a student object
 *      consumes:
 *          - application/json
 *      parameters:
 *        - in: path
 *          name: ROLLID
 *          required: true
 *          schema:
 *            type: integer
 *        - in: body
 *          name: student
 *          description: The student to update.
 *          schema:
 *            type: object
 *            properties:
 *              NAME:
 *                type: string
 *              TITLE:
 *                type: string
 *              CLASS:
 *                type: string
 *              SECTION:
 *                type: string
 *      responses:
 *          201:
 *              description: Object student is either completely updated or a new student object is inserted
 */
app.put('/student/:ROLLID', jsonParser, 
  [check('NAME').isLength({ min: 3, max: 10 }).isAlpha().escape().trim(),
  check('TITLE').isLength({ min: 3, max: 10 }).isAlpha().escape().trim(),
  check('CLASS').isLength({ min: 1, max: 5 }).isAlpha().escape().trim(),
  check('SECTION').isLength({ min: 1, max: 1 }).isAlpha().escape().trim(),
  check('ROLLID').isLength({ min: 1, max: 2 }).isInt().escape().trim()],
function(req, res) {

const errors = validationResult(req);
  if (!errors.isEmpty())
{
    return res.status(422).json({ errors: errors.array()})
}


  let body = req.body;
  let NAME = body["NAME"];
  let TITLE = body["TITLE"];
  let CLASS = body["CLASS"];
  let SECTION = body["SECTION"];
  
  let ROLLID = req.params["ROLLID"];


 let sql = `UPDATE student SET NAME='${NAME}',TITLE='${TITLE}', CLASS='${CLASS}',SECTION='${SECTION}', ROLLID='${ROLLID}' WHERE ROLLID=${ROLLID}`;

  pool.getConnection((err, connection) => {

  connection.query(sql, function(err, data, fields) {
    if (err) throw err;
  connection.release();
    res.json({
      status: 201,
      message: "Student updated successfully"
    })
  })
});
});

/**
 * @swagger
 * /student/{ROLLID}:
 *    delete:
 *      description: This should delete a student object based on the roll id
 *      summary: This should delete a student object based on the roll id
 *      consumes:
 *          - application/json
 *      parameters:
 *        - in: path
 *          name: ROLLID
 *          required: true
 *          schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Student object is deleted based on ROLLID field
 */
app.delete('/student/:ROLLID', jsonParser, 
[check('ROLLID').isLength({ min: 1, max: 2 }).isInt().escape().trim()],
function(req, res) {                     

const errors = validationResult(req);
  if (!errors.isEmpty())
{
    return res.status(422).json({ errors: errors.array()})
}
                                                                                        
let ROLLID = req.params["ROLLID"];                                                            
                                                                                        
let sql = `DELETE FROM student WHERE ROLLID=${ROLLID}`; 
                                                                                        
  pool.getConnection((err, connection) => {                                             
                                                                                        
  connection.query(sql, function(err, data, fields) {                                   
    if (err) throw err;                                                                 
  connection.release();                                                                 
    res.json({                                                                          
      status: 200,                                                                      
      message: "Student Deleted successfully"                                           
    })                                                                                  
  })                                                                                    
});                                                                                     
});                                                                                     

app.listen(port, () => {
	console.log(`Example app listening at http://localhost:${port}`)
});
