let prepare,extract,organize,finalize,validateOptions;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("./src/specification.js",[["prepare",["prepare"],function(v){prepare=v}],["extract",["extract"],function(v){extract=v}],["organize",["organize"],function(v){organize=v}],["finalize",["finalize"],function(v){finalize=v}]]);_34e‍.w("./src/utils.js",[["validateOptions",["validateOptions"],function(v){validateOptions=v}]]);


/**
 * Main function
 * @param {object} options - Configuration options
 * @param {string} options.encoding Optional, passed to read file function options. Defaults to 'utf8'.
 * @param {string} options.format Optional, defaults to '.json' - target file format '.yml' or '.yaml'.
 * @param {object} options.swaggerDefinition
 * @param {object} options.definition
 * @param {array} options.apis
 * @returns {object|string} Output specification as json or yaml
 */
const lib = async (options) => {
  validateOptions(options);

  const spec = prepare(options);
  const parts = await extract(options);

  organize(spec, parts);

  return finalize(spec, options);
};

_34e‍.d(lib);
